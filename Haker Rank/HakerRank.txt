test no :1

import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._

object Result {

    /*
     * Complete the 'reverseArray' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    def reverseArray(nums: Array[Int]): Array[Int] = {
  var temp1 = 0
    var temp2 = 0
    var index_position = 0
    var index_last_pos = nums.length-1
    while (index_position < index_last_pos) {
      temp1 = nums(index_position)
      temp2 = nums(index_last_pos)
      nums(index_position) = temp2
      nums(index_last_pos) = temp1
      index_position += 1
      index_last_pos -= 1
    }
    nums
  }

}

object Solution {
    def main(args: Array[String]) {
        val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

        val arrCount = StdIn.readLine.trim.toInt

        val arr = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)

        val res = Result.reverseArray(arr)

        printWriter.println(res.mkString(" "))

        printWriter.close()
    }
}


test no : 2


import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._

object Result {

    /*
     * Complete the 'hourglassSum' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    def hourglassSum(arr: Array[Array[Int]]): Int = {
  
     val listOfSums: ArrayBuffer[Option[Int]] = new ArrayBuffer()
        for (i <- 0 to arr.size) {
            for (j <- 0 to arr.size) {
                val hourGlassSum = readHourGlass(i, j, arr)
                
                listOfSums += hourGlassSum
            } 
        }

        listOfSums.flatten.max
    }

    def readHourGlass(i: Int, j: Int, arr: Array[Array[Int]]): Option[Int] = {
        if ( i * 2 > arr.size || j * 2 > arr.size ) { 
            None
        } else {
            val currentHourGlass: ArrayBuffer[Int] = new ArrayBuffer()
            val endI: Int = i + 2
            val endJ: Int = j + 2

            for (ii <- i to endI) {
                for (jj <- j to endJ) {
                    if (!(ii == i+1 && (jj == j || jj == j + 2))) {
                        currentHourGlass += arr(ii)(jj)
                    }
                }
            } 

            Some(currentHourGlass.sum)
        }        
    }

}

object Solution {
    def main(args: Array[String]) {
        val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

        val arr = Array.ofDim[Int](6, 6)

        for (i <- 0 until 6) {
            arr(i) = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)
        }

        val result = Result.hourglassSum(arr)

        printWriter.println(result)

        printWriter.close()
    }
}
